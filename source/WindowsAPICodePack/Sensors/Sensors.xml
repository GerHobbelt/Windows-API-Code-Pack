<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinCopies.WindowsAPICodePack.Sensors</name>
    </assembly>
    <members>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorEmptyData">
            <summary>
              Recherche une chaîne localisée semblable à Data field array cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorEmptyProperties">
            <summary>
              Recherche une chaîne localisée semblable à Property keys array cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorGetString">
            <summary>
              Recherche une chaîne localisée semblable à Sensor id=&apos;{0}&apos; type=&apos;{1}&apos; category=&apos;{2}&apos; name=&apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorManagerEmptySensorsCollection">
            <summary>
              Recherche une chaîne localisée semblable à Sensors collection cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorNotInitialized">
            <summary>
              Recherche une chaîne localisée semblable à Sensor not initialized..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorNullValueAtIndex">
            <summary>
              Recherche une chaîne localisée semblable à Data contains a null value at index {0}..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorPropertyNotFound">
            <summary>
              Recherche une chaîne localisée semblable à Could not find property..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorsNotFound">
            <summary>
              Recherche une chaîne localisée semblable à No sensors found. Are any sensor drivers installed?.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorUnableToGetReport">
            <summary>
              Recherche une chaîne localisée semblable à Unable to get report from sensor..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Resources.LocalizedMessages.SensorUnexpectedPointerSize">
            <summary>
              Recherche une chaîne localisée semblable à Unexpected pointer size..
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorConnectionType">
            <summary>
            Defines types of sensor device connections.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorConnectionType.Invalid">
            <summary>
            Invalid value for this enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorConnectionType.Integrated">
            <summary>
            Indicates that the sensor is built into the computer. 
            </summary>        
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorConnectionType.Attached">
            <summary>
            Indicates that the sensor is attached to the computer, such as through a peripheral device. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorConnectionType.External">
            <summary>
            Indicates that the sensor is connected by external means, such as through a network connection. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorDescriptionAttribute">
            <summary>
            An attribute which is applied on <see cref="T:Microsoft.WindowsAPICodePack.Sensors.Sensor"/>-derived types. Provides essential metadata
            such as the GUID of the sensor type for which this wrapper was written.
            </summary>    
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorDescriptionAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribue with a string represening the sensor type GUID and the type of the data report class.
            </summary>
            <param name="sensorType">String representing the sensor type GUID.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorDescriptionAttribute.SensorType">
            <summary>
            Gets a string representing the sensor type GUID.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorDescriptionAttribute.SensorTypeGuid">
            <summary>
            Gets the GUID of the sensor type.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorState">
            <summary>
            The state of the sensor
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.Removed">
            <summary>
            The device has been removed.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.Ready">
            <summary>
            The device is ready.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.NotAvailable">
            <summary>
            The device is not available.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.NoData">
            <summary>
            No data is available.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.Initializing">
            <summary>
            The device is initializing.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.AccessDenied">
            <summary>
            No permissions exist to access the device.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorState.Error">
            <summary>
            The device has encountered an error.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.DataReportChangedEventHandler">
            <summary>
            Represents the method that will handle the DataReportChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.StateChangedEventHandler">
            <summary>
            Represents the method that will handle the StatChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.Sensor">
            <summary>
            Defines a general wrapper for a sensor.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsAPICodePack.Sensors.Sensor.DataReportChanged">
            <summary>
            Occurs when the DataReport member changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsAPICodePack.Sensors.Sensor.StateChanged">
            <summary>
            Occurs when the State member changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.DataReport">
            <summary>
            Gets a value that specifies the most recent data reported by the sensor.
            </summary>        
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.SensorId">
            <summary>
            Gets a value that specifies the GUID for the sensor instance.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.CategoryId">
            <summary>
            Gets a value that specifies the GUID for the sensor category.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.TypeId">
            <summary>
            Gets a value that specifies the GUID for the sensor type.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.FriendlyName">
            <summary>
            Gets a value that specifies the sensor's friendly name.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.State">
            <summary>
            Gets a value that specifies the sensor's current state.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.ReportInterval">
            <summary>
            Gets or sets a value that specifies the report interval.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.MinimumReportInterval">
            <summary>
            Gets a value that specifies the minimum report interval.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.Manufacturer">
            <summary>
            Gets a value that specifies the manufacturer of the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.Model">
            <summary>
            Gets a value that specifies the sensor's model.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.SerialNumber">
            <summary>
            Gets a value that specifies the sensor's serial number.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.Description">
            <summary>
            Gets a value that specifies the sensor's description.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.ConnectionType">
            <summary>
            Gets a value that specifies the sensor's connection type.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.DevicePath">
            <summary>
            Gets a value that specifies the sensor's device path.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Sensor.AutoUpdateDataReport">
            <summary>
            Gets or sets a value that specifies whether the data should be automatically updated.   
            If the value is not set, call TryUpdateDataReport or UpdateDataReport to update the DataReport member.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.TryUpdateData">
            <summary>
            Attempts a synchronous data update from the sensor.
            </summary>
            <returns><b>true</b> if the request was successful; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.UpdateData">
            <summary>
            Requests a synchronous data update from the sensor. The method throws an exception if the request fails.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.GetProperty(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey)">
            <summary>
            Retrieves a property value by the property key.
            </summary>
            <param name="propKey">A property key.</param>
            <returns>A property value.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.GetProperty(System.Int32@)">
            <summary>
            Retrieves a property value by the property index.
            Assumes the GUID component in the property key takes the sensor's type GUID.
            </summary>
            <param name="propIndex">A property index.</param>
            <returns>A property value.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.GetProperties(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey[]@)">
            <summary>
            Retrieves the values of multiple properties by property key.
            </summary>
            <param name="propKeys">An array of properties to retrieve.</param>
            <returns>A dictionary that contains the property keys and values.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.GetSupportedProperties">
            <summary>
            Returns a list of supported properties for the sensor.
            </summary>
            <returns>A strongly typed list of supported properties.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.GetProperties(System.Int32[])">
            <summary>
            Retrieves the values of multiple properties by their index.
            Assumes that the GUID component of the property keys is the sensor's type GUID.
            </summary>
            <param name="propIndexes">The indexes of the properties to retrieve.</param>
            <returns>An array that contains the property values.</returns>
            <remarks>
            The returned array will contain null values for some properties if the values could not be retrieved.
            </remarks>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.SetProperties(Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo[]@)">
            <summary>
            Sets the values of multiple properties.
            </summary>
            <param name="data">An array that contains the property keys and values.</param>
            <returns>A dictionary of the new values for the properties. Actual values may not match the requested values.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.Initialize">
            <summary>
            Initializes the Sensor wrapper after it has been bound to the native ISensor interface
            and is ready for subsequent initialization.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.SetEventInterest(System.Guid)">
            <summary>
            Informs the sensor driver of interest in a specific type of event.
            </summary>
            <param name="eventType">The type of event of interest.</param>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.ClearEventInterest(System.Guid@)">
            <summary>
             Informs the sensor driver to clear a specific type of event.
            </summary>
            <param name="eventType">The type of event of interest.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Sensor.IsEventInterestSet(System.String)">
            <summary>
            Determines whether the sensor driver will file events for a particular type of event.
            </summary>
            <param name="eventType">The type of event, as a GUID.</param>
            <returns><b>true</b> if the sensor will report interest in the specified event.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo">
            <summary>
            Defines a structure that contains the property ID (key) and value.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.#ctor(Microsoft.WindowsAPICodePack.PropertySystem.PropertyKey,System.Object)">
            <summary>
            Initializes the structure.
            </summary>
            <param name="propKey">A property ID (key).</param>
            <param name="value">A property value. The type must be valid for the property ID.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.Key">
            <summary>
            Gets the property's key.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.Value">
            <summary>
            Gets the property's value.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.GetHashCode">
            <summary>
            Returns the hash code for a particular DataFieldInfo structure.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.Equals(System.Object)">
            <summary>
            Determines if this object and another object are equal.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><b>true</b> if this instance and another object are equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.Equals(Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo)">
            <summary>
            Determines if this key and value pair and another key and value pair are equal.
            </summary>
            <param name="other">The item to compare.</param>
            <returns><b>true</b> if equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.op_Equality(Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo,Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo)">
            <summary>
            DataFieldInfo == operator overload
            </summary>
            <param name="first">The first item to compare.</param>
            <param name="second">The second item to compare.</param>
            <returns><b>true</b> if equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo.op_Inequality(Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo,Microsoft.WindowsAPICodePack.Sensors.DataFieldInfo)">
            <summary>
            DataFieldInfo != operator overload
            </summary>
            <param name="first">The first item to compare.</param>
            <param name="second">The second item to comare.</param>
            <returns><b>true</b> if not equal; otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorData">
            <summary>
            Defines a mapping of data field identifiers to the data returned in a sensor report.
            </summary>    
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Add(System.Guid,System.Collections.Generic.IList{System.Object})">
            <summary>
            Adds a data item to the dictionary.
            </summary>
            <param name="key">The data field identifier.</param>
            <param name="value">The data list.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.ContainsKey(System.Guid)">
            <summary>
            Determines if a particular data field itentifer is present in the collection.
            </summary>
            <param name="key">The data field identifier.</param>
            <returns><b>true</b> if the data field identifier is present.</returns>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorData.Keys">
            <summary>
            Gets the list of the data field identifiers in this collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Remove(System.Guid)">
            <summary>
            Removes a particular data field identifier from the collection.
            </summary>
            <param name="key">The data field identifier.</param>
            <returns><b>true</b> if the item was removed.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.TryGetValue(System.Guid,System.Collections.Generic.IList{System.Object}@)">
            <summary>
            Attempts to get the value of a data item.
            </summary>
            <param name="key">The data field identifier.</param>
            <param name="value">The data list.</param>
            <returns><b>true</b> if able to obtain the value; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorData.Values">
            <summary>
            Gets the list of data values in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorData.Item(System.Guid)">
            <summary>
            Gets or sets the index operator for the dictionary by key.
            </summary>
            <param name="key">A GUID.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Add(System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.IList{System.Object}})">
            <summary>
            Adds a specified key/value data pair to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Clear">
            <summary>
            Clears the items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Contains(System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.IList{System.Object}})">
            <summary>
            Determines if the collection contains the specified key/value pair. 
            </summary>
            <param name="item">The item to locate.</param>
            <returns><b>true</b> if the collection contains the key/value pair; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.CopyTo(System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.IList{System.Object}}[],System.Int32)">
            <summary>
            Copies an element collection to another collection.
            </summary>
            <param name="array">The destination collection.</param>
            <param name="arrayIndex">The index of the item to copy.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorData.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorData.IsReadOnly">
            <summary>
            Gets a value that determines if the collection is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.Remove(System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.IList{System.Object}})">
            <summary>
            Removes a particular item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><b>true</b> if successful; otherwise <b>false</b></returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorList`1">
            <summary>
            Defines a strongly typed list of sensors.
            </summary>
            <typeparam name="TSensor">The type of sensor in the list.</typeparam>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.IndexOf(`0)">
            <summary>
            Returns a sensor at a particular index.
            </summary>
            <param name="item">The sensor item.</param>
            <returns>The index of the sensor.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a sensor at a specific location in the list.
            </summary>
            <param name="index">The index to insert the sensor.</param>
            <param name="item">The sensor to insert.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.RemoveAt(System.Int32)">
            <summary>
            Removes a sensor at a specific location in the list.
            </summary>
            <param name="index">The index of the sensor to remove.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Item(System.Int32)">
            <summary>
            Gets or sets a sensor at a specified location in the list.
            </summary>
            <param name="index">The index of the sensor in the list.</param>
            <returns>The sensor.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Add(`0)">
            <summary>
            Adds a sensor to the end of the list.
            </summary>
            <param name="item">The sensor item.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Clear">
            <summary>
            Clears the list of sensors.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Contains(`0)">
            <summary>
            Determines if the list contains a specified sensor.
            </summary>
            <param name="item">The sensor to locate.</param>
            <returns><b>true</b> if the list contains the sensor; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies a sensor to a new list.
            </summary>
            <param name="array">The destination list.</param>
            <param name="arrayIndex">The index of the item to copy.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.IsReadOnly">
            <summary>
            Gets a value that determines if the list is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.Remove(`0)">
            <summary>
            Removes a specific sensor from the list.
            </summary>
            <param name="item">The sensor to remove.</param>
            <returns><b>true</b> if the sensor was removed from the list; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.GetEnumerator">
            <summary>
            Returns an enumerator for the list.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the list.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorAvailabilityChange">
            <summary>
            Specifies the types of change in sensor availability.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorAvailabilityChange.Addition">
            <summary>
            A sensor has been added.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorAvailabilityChange.Removal">
            <summary>
            A sensor has been removed.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorsChangedEventArgs">
            <summary>
            Defines the data passed to the SensorsChangedHandler.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorsChangedEventArgs.Change">
            <summary>
            The type of change. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorsChangedEventArgs.SensorId">
            <summary>
            The ID of the sensor that changed.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorsChangedEventHandler">
            <summary>
            Represents the method that will handle the system sensor list change.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorManager">
            <summary>
            Manages the sensors conected to the system.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetAllSensors">
            <summary>
            Retireves a collection of all sensors.
            </summary>
            <returns>A list of all sensors.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetSensorsByCategoryId(System.Guid@)">
            <summary>
            Retrieves a collection of sensors filtered by category ID.
            </summary>
            <param name="category">The category ID of the requested sensors.</param>
            <returns>A list of sensors of the specified category ID.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetSensorsByTypeId(System.Guid@)">
            <summary>
            Returns a collection of sensors filtered by type ID.
            </summary>
            <param name="typeId">The type ID of the sensors requested.</param>
            <returns>A list of sensors of the spefified type ID.</returns>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetSensorsByTypeId``1">
            <summary>
            Returns a strongly typed collection of specific sensor types.
            </summary>
            <typeparam name="T">The type of the sensors to retrieve.</typeparam>
            <returns>A strongly types list of sensors.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetSensorBySensorId``1(System.Guid@)">
            <summary>
            Returns a specific sensor by sensor ID.
            </summary>
            <typeparam name="T">A strongly typed sensor.</typeparam>
            <param name="sensorId">The unique identifier of the sensor.</param>
            <returns>A particular sensor.</returns>        
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.RequestPermission(System.IntPtr,System.Boolean,Microsoft.WindowsAPICodePack.Sensors.SensorList{Microsoft.WindowsAPICodePack.Sensors.Sensor})">
            <summary>
            Opens a system dialog box to request user permission to access sensor data.
            </summary>
            <param name="parentWindowHandle">The handle to a window that can act as a parent to the permissions dialog box.</param>
            <param name="modal">Specifies whether the window should be modal.</param>
            <param name="sensors">The sensors for which to request permission.</param>
        </member>
        <member name="E:Microsoft.WindowsAPICodePack.Sensors.SensorManager.SensorsChanged">
            <summary>
            Occurs when the system's list of sensors changes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorManager.guidToSensorDescr">
            <summary>
            Sensor type GUID -> .NET Type + report type
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.SensorManager.sensorTypeToGuid">
            <summary>
            .NET type -> type GUID.
            </summary>      
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.OnSensorsChanged(System.Guid@,Microsoft.WindowsAPICodePack.Sensors.SensorAvailabilityChange@)">
            <summary>
            Notification that the list of sensors has changed
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.BuildSensorTypeMap">
            <summary>
            Interrogates assemblies currently loaded into the AppDomain for classes deriving from <see cref="T:Microsoft.WindowsAPICodePack.Sensors.Sensor"/>.
            Builds data structures which map those types to sensor type GUIDs. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorManager.GetSensorWrapperInstance``1(Microsoft.WindowsAPICodePack.Win32Native.Sensors.ISensor@)">
            <summary>
            Returns an instance of a sensor wrapper appropritate for the given sensor COM interface.
            If no appropriate sensor wrapper type could be found, the object created will be of the base-class type <see cref="T:Microsoft.WindowsAPICodePack.Sensors.Sensor"/>.
            </summary>
            <param name="nativeISensor">The underlying sensor COM interface.</param>
            <returns>A wrapper instance.</returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorTypeData">
            <summary>
            Data associated with a sensor type GUID.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException">
            <summary>
            Defines an exception specific to the sensors.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException.#ctor(System.Runtime.Serialization.SerializationInfo@,System.Runtime.Serialization.StreamingContext@)">
            <summary>
            Initializes a new instance of the Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException class
             with the specified context and the serialization information.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo associated with this exception.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext that represents the context of this exception.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException.#ctor(System.String@)">
            <summary>
            Initializes a new instance of the Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException 
            class with the specified detailed description.
            </summary>
            <param name="message">A detailed description of the error.</param>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException.#ctor">
            <summary>
            Initializes a new instance of the Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException class
            with the last Win32 error that occurred.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException.#ctor(System.String@,System.Exception@)">
            <summary>
            Initializes a new instance of the Microsoft.WindowsAPICodePack.Sensors.SensorPlatformException class
            with the specified detailed description and the specified exception.
            </summary>
            <param name="message">A detailed description of the error.</param>
            <param name="innerException">A reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.SensorReport">
            <summary>
            Represents all the data from a single sensor data report.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorReport.TimeStamp">
            <summary>
            Gets the time when the data report was generated.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorReport.Values">
            <summary>
            Gets the data values in the report.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.SensorReport.Source">
            <summary>
            Gets the sensor that is the source of this data report.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.AmbientLightSensor">
            <summary>
            Represents a generic ambient light sensor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.AmbientLightSensor.GetLightResponseCurve">
            <summary>
            Gets an array representing the light response curve.
            </summary>
            <returns>Array representing the light response curve.</returns>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.AmbientLightSensor.CurrentLuminousIntensity">
            <summary>
            Gets the current luminous intensity of the sensor.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.LuminousIntensity">
            <summary>
            Defines a luminous intensity measurement. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.LuminousIntensity.#ctor(Microsoft.WindowsAPICodePack.Sensors.SensorReport@)">
            <summary>
            Initializes a sensor report to obtain a luminous intensity value.
            </summary>
            <param name="report">The report name.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.LuminousIntensity.Intensity">
            <summary>
            Gets the intensity of the light in lumens.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.Accelerometer3D">
            <summary>
            Represents a 3D accelerometer.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Accelerometer3D.CurrentAcceleration">
            <summary>
            Gets the current acceleration in G's. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.AccelerationAxis">
            <summary>
            Specifies the axis of the acceleration measurement.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.AccelerationAxis.XAxis">
            <summary>
            The x-axis.
            </summary>        
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.AccelerationAxis.YAxis">
            <summary>
            The y-axis.
            </summary>        
        </member>
        <member name="F:Microsoft.WindowsAPICodePack.Sensors.AccelerationAxis.ZAxis">
            <summary>
            THe z-axis.
            </summary>        
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.Acceleration3D">
            <summary>
            Creates an acceleration measurement from the data in the report.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAPICodePack.Sensors.Acceleration3D.#ctor(Microsoft.WindowsAPICodePack.Sensors.SensorReport@)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="report">The sensor report to evaluate.</param>
        </member>
        <member name="P:Microsoft.WindowsAPICodePack.Sensors.Acceleration3D.Item(Microsoft.WindowsAPICodePack.Sensors.AccelerationAxis@)">
            <summary>
            Gets the acceleration reported by the sensor.
            </summary>
            <param name="axis">The axis of the acceleration.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.WindowsAPICodePack.Sensors.UnknownSensor">
            <summary>
            Sensor type used for sensors for which there is no specific implementation.
            </summary>
        </member>
    </members>
</doc>
